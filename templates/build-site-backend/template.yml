#  Moselwal Digitalagentur Build Tools
#    Copyright (C) 2024  Moselwal Digitalagentur GmbH, Kai Ole Hartwig <support@moselwal.de>
#
#  This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

spec:
  inputs:
    stage:
      default: 'build'
      description: "The stage in the CI/CD pipeline where this job will run.  "
    rules-config:
      description: "Configuration rules that determine when the job should run."
      type: array
      default:
        - if: $CI_DEPLOY_FREEZE == null && $CI_COMMIT_TAG != null
          exists:
            - composer.json
        - when: never
    needs-config:
      description: "Configure the jobs that needed to run this job."
      type: array
      default:
        - job: build:prepare
          optional: false
          artifacts: true
    image-config:
      # TODO: Refactor and use Semantic Versioning
      description: "The Docker image to use for the job. This should use semantic versioning."
      default: "registry.moselwal.io/devops/images/php/$PHP_VERSION/ci:latest"
    tags-config:
      description: "Tags used to select specific runners to execute the job."
      type: array
      default:
        - docker
    additional-script-begin:
      description: "Add additional Script at the beginning of the Script."
      default: ''
    additional-post-composer-install-script:
      description: "Add additional Script after composer install."
      default: ''
    additional-script-end:
      description: "Add additional Script at the end of the Script."
      default: ''
    additional-find-options-vendor-documentation-removal:
      description: "Add additional find options to the removal command of vendor documentation."
      default: ''
---
build:site:backend:
  stage: $[[ inputs.stage ]]
  needs: $[[ inputs.needs-config ]]
  rules: $[[ inputs.rules-config ]]
  image: $[[ inputs.image-config | expand_vars ]]
  tags: $[[ inputs.tags-config ]]
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    GIT_SUBMODULE_DEPTH: 1
  before_script:
    - export SHELL=/bin/bash
  script:
    - $[[ inputs.additional-script-begin ]]
    - rm -rf vendor
    - composer install --no-interaction --no-dev -o -a
    - $[[ inputs.additional-post-composer-install-script ]]

    - |
      # This Script downloads and extracts all TYPO3 language packs for the current TYPO3 version
      
      # Base URL for language packs
      base_url="https://localize.typo3.org/xliff"

      # Directory to download the language packs to
      download_dir="."
      mkdir -p "$download_dir"

      # Language code to download
      language_code="de"

      # target directory for the extracted language packs
      languages_dir="./var/labels/$language_code"
      
      # create target directory if it does not exist
      mkdir -p "$languages_dir"

      # path to composer.lock file
      composer_lock="./composer.lock"
      
      # current TYPO3 MAJOR version
      TYPO3_VERSION="$(jq -r '.packages[] | select(.name == "typo3/cms-core") | .version' "${composer_lock}" | cut -d '.' -f1)"
      
      # extract all extensions from composer.lock
      extensions=($(jq -r '.packages[] | select(.type == "typo3-cms-extension" or .type == "typo3-cms-framework") | .name' "$composer_lock"))

      for ext in "${extensions[@]}"; do
          # extract extension key from package name
          ext_key=$(echo $ext | sed 's/.*\///')
          # system extension (framework) - remove cms- prefix
          clean_ext_key=${ext_key//cms-/}
          ext_type=$(jq -r --arg ext "$ext" '.packages[] | select(.name == $ext) | .type' "$composer_lock")

          if [[ $ext_type == "typo3-cms-framework" ]]; then
              # system extension (framework)
              # construct URL for language pack
              first_char=${clean_ext_key:0:1}
              second_char=${clean_ext_key:1:1}
              url="$base_url/$first_char/$second_char/$clean_ext_key-l10n/$clean_ext_key-l10n-$language_code.$TYPO3_VERSION.zip"
          else
              # extensions
              # construct URL for language pack
              first_char=${ext_key:0:1}
              second_char=${ext_key:1:1}
              url="$base_url/$first_char/$second_char/$ext_key-l10n/$ext_key-l10n-$language_code.zip"
          fi

          echo "Lade Sprachpaket f√ºr $ext_key in $language_code herunter von $url"
          wget -t 1 "$url" -P "$download_dir" || true

          # unzip language pack
          if [[ $ext_type == "typo3-cms-framework" ]]; then
              # system extension (framework)
              if [[ -f "$download_dir/$clean_ext_key-l10n-$language_code.$TYPO3_VERSION.zip" ]]; then
                  unzip -o "$download_dir/$clean_ext_key-l10n-$language_code.$TYPO3_VERSION.zip" -d "$languages_dir"
                  rm "$download_dir/$clean_ext_key-l10n-$language_code.$TYPO3_VERSION.zip"
              fi
          else
              # extensions
              if [[ -f "$download_dir/$ext_key-l10n-$language_code.zip" ]]; then
                  unzip -o "$download_dir/$ext_key-l10n-$language_code.zip" -d "$languages_dir"
                  rm "$download_dir/$ext_key-l10n-$language_code.zip"
              fi
          fi
      done
    # remove Documentation, Tests, Build folders of all packages but our own.
    - find -L ./vendor -name Documentation $[[ inputs.additional-find-options-vendor-documentation-removal ]] -exec rm -rf {} \; || true;
    - find -L ./vendor -name Tests -exec rm -rf {} \; || true;
    - find -L ./vendor -name Build -exec rm -rf {} \; || true;
    - find -L ./vendor -name .Build -exec rm -rf {} \; || true;
    - find -L ./vendor -name build -exec rm -rf {} \; || true;
    - find -L ./vendor -name .build -exec rm -rf {} \; || true;
    - rm -rf env. && cp docker/httpd/.env .env && cp docker/httpd/staging.env staging.env || true &&  cp docker/httpd/production.env production.env || true
    - rm -rf docker-compose.yml && cp docker/httpd/docker-compose.staging.yml docker-compose.staging.yml || true && cp docker/httpd/docker-compose.production.yml docker-compose.production.yml || true
    - rm -rf $WEB_DIR/fileadmin
    - $[[ inputs.additional-script-end ]]
  artifacts:
    untracked: true
    paths:
      - ./*
    exclude:
      - ./*.ssh-agent
      - ./.gitlab
      - ./.gitlab/**/*
      - ./.git
      - ./.git/**/*
      - "*/.gitkeep"
      - "*/.gitmodules"
      - ./.Build
      - ./.Build/**/*
      - .gitlab-ci-local
      - .gitlab-ci-local/**/*
      - .gitignore
      - .gitattributes
      - .gitlab-ci.yml
      - .nvmrc
      - .npm/**
      - .releaserc.yml
      - .phpstorm.meta.php
      - makefile
      - auth.json
      - cghooks.lock
      - c3.php
      - README.md
      - captainhook.json
      - composer.json
      - composer.lock
      - dynamicReturnTypeMeta.json
      - docker
      - docker/**/*
      - .editorconfig
      - $WEB_DIR/fileadmin
      - $WEB_DIR/fileadmin/**/*
      - rector.php
      - phpmd.baseline.xml
      - codeception.yml
      - phpstan.neon
      - budget.json
      - phpstan-baseline.neon
      - "**/phpmetrics/*"
      - "**/Test/*"
      - "**/Tests/*"
      - "**/test/*"
      - "**/tests/*"
    when: always
    expire_in: 5 days
