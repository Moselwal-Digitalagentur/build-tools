#  Moselwal Digitalagentur Build Tools
#    Copyright (C) 2024  Moselwal Digitalagentur GmbH, Kai Ole Hartwig <support@moselwal.de>
#
#  This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

spec:
  inputs:
    stage:
      default: 'build'
      description: "The stage in the CI/CD pipeline where this job will run.  "
    rules-config:
      description: "Configuration rules that determine when the job should run."
      type: array
      default:
        - if: $CI_COMMIT_TAG
          when: never
        - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
        - if: $CI_COMMIT_REF_NAME != 'release'
        - if: $CI_COMMIT_REF_NAME == 'release'
          when: never
    image-config:
      description: "The Docker image to use for the job. This should use semantic versioning."
      default: "${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/node:$NODE_VERSION-alpine3.19"
    tags-config:
      description: "Tags used to select specific runners to execute the job."
      type: array
      default:
        - docker
    additional-script-begin:
      description: "Add additional Script at the beginning of the Script."
      default: ''
    additional-script-end:
      description: "Add additional Script at the end of the Script."
      default: ''
---
build:extension:frontend:
  stage: $[[ inputs.stage ]]
  needs: ["build:prepare"]
  rules: $[[ inputs.rules-config ]]
  image: $[[ inputs.image-config | expand_vars ]]
  tags: $[[ inputs.tags-config ]]
  allow_failure: true
  before_script:
    apk add --no-cache jq git
  script:
    - $[[ inputs.additional-script-begin ]]
    - |
      - |
      if ! command -v git > /dev/null 2>&1; then
        echo "Command 'git' could not be found. Please install it."
        exit 1
      fi
      if ! command -v curl > /dev/null 2>&1; then
        echo "Command 'curl' could not be found. Please install it."
        exit 1
      fi
      if ! command -v jq > /dev/null 2>&1; then
        echo "Command 'jq' could not be found. Please install it."
        exit 1
      fi
    - |
      export PRIVATE_TOKEN="${GITLAB_CI_NODE_ARTIFACT_PUSHER}"
      export API_URL="https://${CI_SERVER_HOST}/api/v4"
    - |
      git clone \
        "https://${GIT_USER_NAME}:${PRIVATE_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}.git" \
        "$REPO_FOLDER"
      cd "$REPO_FOLDER"
      git config --global user.email "$GIT_USER_EMAIL"
      git config --global user.name "$GIT_USER_NAME"
      git checkout "$CI_COMMIT_REF_NAME"
    - |
      cd ${NPM_BUILD_DIR}
      npm ci
      npm run build
      cd -
    - |
      git add ./Resources/Public
      if ! git status --porcelain | grep -E "^"; then
        echo "Build artifacts are up to date."
      else
        echo "Build artifacts are not up to date."
        if [ "$CI_PIPELINE_SOURCE" != "merge_request_event" ]; then
          echo "This is not a Merge Request Pipeline. Therefore the CI Job fails due to the build artifacts not being up to date."
          echo "Open a Merge Request for this issue to automatically resolve."
          exit 1
        fi
      
        echo "This CI JOB will fail but create a Merge Request to update this branch's (${CI_COMMIT_REF_NAME}) build artifacts."
      
        MR_BRANCH="${CI_COMMIT_REF_NAME}-$(date +%Y-%m-%d-%H%M%S)"
        git checkout -b "${MR_BRANCH}"
        echo -e "chore(build-artifacts): update build artifacts\n\nRefs: NO-JIRA" | git commit -F -
        git push --set-upstream origin "${MR_BRANCH}"
      
        # Create Merge Request
        MERGE_REQUEST_RESPONSE=$(curl --silent -H "PRIVATE-TOKEN: ${PRIVATE_TOKEN}" -X POST \
          "${API_URL}/projects/${CI_PROJECT_ID}/merge_requests" \
          --form "source_branch=${MR_BRANCH}" --form "target_branch=${CI_COMMIT_REF_NAME}" \
          --form "title=chore(build-artifacts): update build artifacts" \
          --form "remove_source_branch=true")

        MERGE_REQUEST_ID=$(echo "$MERGE_REQUEST_RESPONSE" | jq -r '.id')
        MERGE_REQUEST_IID=$(echo "$MERGE_REQUEST_RESPONSE" | jq -r '.iid')
        sleep 10

        # Enable auto merge
        set_auto_merge() {
          curl --silent -H "PRIVATE-TOKEN: ${PRIVATE_TOKEN}" -X PUT \
            -H "Content-Type: application/json" \
            "${API_URL}/projects/${CI_PROJECT_ID}/merge_requests/${MERGE_REQUEST_IID}/merge" \
            -d '{"id":"${MERGE_REQUEST_ID}","merge_request_iid":"${MERGE_REQUEST_IID}","merge_when_pipeline_succeeds":true}'
        }
        set_auto_merge
        sleep 90
      
        # Wait for MR to be merged
        while true; do
          MR_STATUS_JSON=$(curl --silent -H "PRIVATE-TOKEN: ${PRIVATE_TOKEN}" \
            "${API_URL}/projects/${CI_PROJECT_ID}/merge_requests/${MERGE_REQUEST_IID}")
          MR_STATUS=$(echo "$MR_STATUS_JSON" | jq -r '.state')
      
          if [ "$MR_STATUS" = "merged" ]; then
            echo "Merge request has been merged."
            echo "Now failing the job, since build artifacts were not up to date."
            exit 1
          elif [ "$MR_STATUS" = "closed" ]; then
            echo "Merge request was closed without merging."
            exit 1
          else
            echo "Merge request is not mergeable. Attempting to rebase..."
            curl --silent -H "PRIVATE-TOKEN: ${PRIVATE_TOKEN}" -X PUT \
              "${API_URL}/projects/${CI_PROJECT_ID}/merge_requests/${MERGE_REQUEST_IID}/rebase"
            sleep 5
            set_auto_merge
          fi
      
          echo "Waiting for merge request to be merged..."
          sleep 90
        done
      fi

    - $[[ inputs.additional-script-end ]]
  artifacts:
    untracked: true
    exclude:
      - ./Build/node_modules/*
    when: always
    expire_in: 60 minutes
