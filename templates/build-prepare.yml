spec:
  inputs:
    stage:
      default: 'build'
---
build:prepare:
  stage: $[[ inputs.stage ]]
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/bash:5-alpine3.19
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_REF_NAME != 'release'
    - if: $CI_COMMIT_REF_NAME == 'release'
  tags:
    - docker
  script:
    - |
      echo "NODE_VERSION=$(cat .nvmrc)" > build.env
      echo "WEB_DIR=$(jq -r '.extra["typo3/cms"]["web-dir"]' composer.json)" >> build.env
      echo "TYPO3_VERSION=$(jq -r '.require["typo3/cms-core"]' composer.json)" >> build.env
      echo "PHP_VERSION=$(jq -r '.config.platform.php' composer.json)" >> build.env

      if ls Classes/*.php 1> /dev/null 2>&1; then
        echo "PHP-Klassendateien gefunden."
        export __HAS_PHP_CLASSES__="true"
      else
        echo "Keine PHP-Klassendateien gefunden."
        export __HAS_PHP_CLASSES__="false"
      fi

      if [ -f "package.json" ] || [ -d "Build" ]; then
        echo "Frontend-Build-Struktur gefunden."
        export __HAS_FRONTEND_BUILD__="true"
      else
        echo "Keine Frontend-Build-Struktur gefunden."
        export __HAS_FRONTEND_BUILD__="false"
      fi
      
      # Exportiere die Variablen fÃ¼r nachfolgende Jobs
      echo "__HAS_PHP_CLASSES__=$__HAS_PHP_CLASSES__" >> build.env
      echo "__HAS_FRONTEND_BUILD__=$__HAS_FRONTEND_BUILD__" >> build.env
  artifacts:
    reports:
      dotenv: build.env
